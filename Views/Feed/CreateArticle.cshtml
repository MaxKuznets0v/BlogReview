@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@using BlogReview.ViewModels
@model ArticleView

@{
    ViewData["Title"] = Localizer["CreateArticlePageTitle"];
}
@{
    var groupNames = ViewData["Groups"] as List<string>;
    bool existing = Model != null && Model.Article.Id != Guid.Empty;
    List<string> tags = new();
    List<string> imageUrls = new();
    string imageId = "";
    if (existing)
    {
        tags = Model.Tags;
        if (Model.Article.ImagePublicId != null)
        {
            imageUrls.Add(Model.ImageUrl);
            imageId = Model.Article.ImagePublicId;
        }
    }
}

<link id="editorStyle" rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
<script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css" type="text/css" />

<style>
    [data-bs-theme="dark"] .select2-selection.select2-selection--multiple {
        background-color: #212529;
        color: gray;
        border: 1px solid #606060;
    }

    [data-bs-theme="dark"] .select2-results {
        background-color: #212529;
        border: 1px solid #606060;
        color: gray;
    }

    [data-bs-theme="dark"] .select2-selection__choice__display {
        color: gray;
    }

    [data-bs-theme="dark"] .select2-search__field {
        color: gray;
        caret-color: gray;
    }

    [data-bs-theme="dark"] .select2-results__option--highlighted {
        background-color: gray !important;
    }

    .select2-container {
        max-width: 800px; 
        margin: 0 auto;
    }

    .dropzone {
        border-radius: 10px;
    }

    .dz-image {
        border: 2px solid #ccc;
        padding: 5px;
    }

    [data-bs-theme="dark"] .dropzone {
        background-color: gray;
    }

    .dz-progress {
        display: none !important;
    }
</style>

<div>
    <form id="articleForm" enctype="multipart/form-data" action='@Url.Action("Article", "Feed")' method="POST" style="max-width: 800px; margin: 0 auto;">
        <input hidden asp-for=Article.Id />
        <div class="form-group">
            <label for="title">@Localizer["ArticleTitle"]</label>
            <input asp-for=Article.Title type="text" class="form-control" id="title" placeholder=@Localizer["ArticleTitle"] required>
        </div>
        <div class="form-group">
            <label for="articleEditor">@Localizer["ArticleContent"]</label>
            <textarea asp-for=Article.Content class="form-control" id="articleEditor" rows="6"></textarea>
            <div class="invalid-feedback">Article content is required</div>
        </div>
        <div class="form-group">
            <label for="rating">@Localizer["ArticleRating"]</label>
            <input asp-for=Article.Rating type="number" class="form-control" id="rating" placeholder=@Localizer["ArticleRating"] min="0" max="10" required>
        </div>
        <div class="form-group">
            <label for="articleObjectName">@Localizer["ArticleObjectName"]</label>
            <input asp-for=Article.ArticleObject.Name type="text" class="form-control" id="articleObjectName" placeholder=@Localizer["ArticleObjectName"] disabled="@existing" required>
        </div>
        <div class="form-group">
            <label for="group">@Localizer["ArticleObjectGroup"]</label>
            <select asp-for="Article.ArticleObject.Group" class="form-control" id="group" disabled="@existing">
                @foreach (var groupName in groupNames)
                {
                    <option value="@groupName">@groupName</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="tags">@Localizer["ArticleTags"]</label>
            <input class="form-control" type="text" id="tags" multiple>
        </div>
        <div class="form-group">
            <label for="images">@Localizer["ArticleImages"]</label>
            <div id="dropzone" class="dropzone"></div>
            <div id="error-message" class="text-danger d-none">@Localizer["DropzoneMaxFilesExceeded"]</div>
        </div>
        <button id="submit" type="submit" class="btn btn-secondary mt-2">@Localizer["SubmitButton"]</button>
    </form>
</div>

<script>
    Dropzone.autoDiscover = false;
    var myDropzone = new Dropzone("#dropzone", {
        url: "@Url.Action("Article", "Feed")",
        autoProcessQueue: false,
        maxFilesize: 5, // MB
        maxFiles: 1,
        acceptedFiles: ".jpg,.jpeg,.png",
        addRemoveLinks: true,
        dictDefaultMessage: "@Localizer["DropzoneMessage"]",
        dictRemoveFile: "@Localizer["DropzoneRemove"]",
        dictMaxFilesExceeded: "@Localizer["DropzoneMaxFilesExceeded"]",
        init: function () {
            this.on("maxfilesexceeded", function (file) {
                this.removeFile(file);
                document.getElementById("error-message").classList.remove("d-none");
            });
            this.on("success", function (file, response) {
                console.log("File uploaded successfully");
            });
            this.on("removedfile", function () {
                if (myDropzone.getQueuedFiles().length < myDropzone.options.maxFiles) {
                    document.getElementById("error-message").classList.add("d-none");
                }
            });
            this.on("error", function (file, errorMessage) {
                console.log("File upload failed: " + errorMessage);
            });
        }
    });

    @foreach (var image in imageUrls)
    {
        @:var mockFile = {
            @:name: 'loaded.jpg',
            @:size: 12345,
            @:type: 'image/jpeg',
            @:status: Dropzone.ADDED,
            @:url: '@image',
            @:accepted: true,
            @:publicId: '@imageId'
        @:};

        @:myDropzone.emit('addedfile', mockFile);
        @:myDropzone.emit('thumbnail', mockFile, '@image');
        @:myDropzone.emit('complete', mockFile);
        @:myDropzone.files.push(mockFile);
    }
</script>
<script>
    $("#tags").select2({
        placeholder: '@Localizer["TagsPlaceholder"]',
        tags: true,
        autocomplete: true,
        language: {
            "searching": function () {
                return '@Localizer["TagsSearching"]';
            },
            "inputTooShort": function (args) {
                return '@Localizer["TagsMinCharacters"]';
            },
        },
        theme: "bootstrap-5",
        minimumInputLength: 1,
        ajax: {
            url: '@Url.Action("AllTags", "Feed")',
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    query: params.term
                };
            },
            processResults: function (data) {
                return {
                    results: data
                };
            },
            cache: true
        }
    });
    $('#tags').on('select2:select', function (e) {
        var tag = e.params.data.text;
        $(this).val('').trigger('change');
        $(this).append('<option value="' + tag + '" selected>' + tag + '</option>');
    });
    @foreach (var tag in tags)
    {
        @:$('#tags').append('<option value="' + '@tag' + '" selected>' + '@tag' + '</option>').trigger('change');
    }
    const darkModeStyle = "https://cdn.rawgit.com/CoffeePerry/simplemde-theme-bootstrap-dark/master/dist/simplemde-theme-bootstrap-dark.min.css";
    const lightModeStyle = "https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css";
    var editor = new SimpleMDE({
        element: document.getElementById("articleEditor"), forceSync: true });
    var lightModeButton = document.getElementById('btnSwitch');
    var modeLink = document.getElementById('editorStyle');
    var mode = localStorage.getItem("theme");
    if (mode == 'dark') {
        modeLink.href = darkModeStyle;
    } else {
        modeLink.href = lightModeStyle;
    }
    lightModeButton.addEventListener("click", function () {
        if (mode == 'light') {
            modeLink.href = darkModeStyle;
            mode = "dark";
        } else {
            modeLink.href = lightModeStyle;
            mode = "light";
        }
    })
    function validateContext() {
        var res = editor.value() !== "" && editor.value() != null;
        var field = document.getElementById("articleEditor");
        if (!res)
        {
            field.classList.add("is-invalid");
        } else {
            field.classList.remove("is-invalid");
        }
        return res;
    }
    document.getElementById('articleForm').addEventListener('submit', function (e) {
        e.preventDefault();
        if (!validateContext()) {
            return;
        }
        var submitButton = document.getElementById("submit");
        submitButton.innerText = '@Localizer["LoadingSign"]...'
        submitButton.disabled = true;
        const params = new URLSearchParams(window.location.search);
        const authorId = params.get('authorId');

        var form = e.target;
        var data = new FormData(form);

        var tags = $('#tags').select2('data');
        var sendTags = [];
        tags.forEach(el => sendTags.push(el.text));
        data.append('tags', sendTags);
        data.append('authorId', authorId);
        console.log(myDropzone.files);
        myDropzone.files.forEach(function (file) {
            if (file.status == "added") {
                data.append("oldImages", file.publicId);
            } else {
                data.append("newImages", file);
            }
        });
        fetch(form.action, {
            method: form.method,
            body: data
        }).then(resp => {
            window.location = resp.url; 
        });
    });
</script>

