@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model BlogReview.ViewModels.ArticleView
@using Markdig
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> userManager

@{
    ViewData["Title"] = Model.Article.Title;
    var contentHtml = Markdown.ToHtml(Model.Article.Content);
    string displayRating = Model.DisplayRating(Localizer["NArating"].Value);
    string category = Model.Category;
    int rating = int.Parse(ViewData["ArticleObjectRating"].ToString());
    bool like = bool.Parse(ViewData["AuthorLike"].ToString());
    int authorRating = int.Parse(ViewData["AuthorRating"].ToString());
    var ratingStyle = "rating-color";
    bool editAllowed = bool.Parse(ViewData["EditAllowed"].ToString());
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<script src="https://code.jquery.com/jquery-3.6.3.js"></script>
<script src="~/js/signalr/dist/browser/signalr.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css"/>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css"/>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js"></script>

<style>
    .ratings {
        margin-right: 10px;
    }

    .ratings i {
        color: #cecece;
        font-size: 32px;
    }

    .rating-color {
        color: #fbc634 !important;
    }

    .bdge {
        height: 21px;
        background-color: orange;
        color: #fff;
        font-size: 11px;
        padding: 8px;
        border-radius: 4px;
        line-height: 3px;
    }

    .comments {
        text-decoration: underline;
        text-underline-position: under;
        cursor: pointer;
    }

    .dot {
        height: 7px;
        width: 7px;
        margin-top: 3px;
        background-color: #bbb;
        border-radius: 50%;
        display: inline-block;
    }

    .hit-voting:hover {
        color: blue;
    }

    .hit-voting {
        cursor: pointer;
    }

    .fa-thumbs-up {
        font-size: 30px; /* adjust the size as needed */
    }

    .delete-comment-link {
        color: gray;
        text-decoration: underline;
        font-size: 0.8em;
        cursor: pointer;
    }

    .slider img {
        max-width: 100%;
        height: auto;
        margin: 0 auto;
    }

    .slick-track {
        display: flex;
    }

    .slick-track .slick-slide {
        display: flex;
        height: auto;
        align-items: center;
        justify-content: center;
    }
</style>

<div style="max-width: 1000px; margin: 0 auto;">
    <h4>@Html.DisplayFor(model => model.Article.Title)</h4>
    <a href='@(Url.Action("Index", "Account") + "?userId=" + Model.Article.AuthorId)'>
        <h6 style="color: gray;">@Localizer["Author"]: @Html.DisplayFor(model => model.Article.Author.UserName) (@Localizer["AuthorRating"]: @authorRating)</h6>
    </a>
    <h6 style="color: gray;">@Localizer["Tags"]: @(string.Join(", ", Model.Tags))</h6>
    <h6 style="color: gray;">@Localizer["ArticleObjectName"]: @Model.Article.ArticleObject.Name (@Localizer["ArticleObjectGroup"]: @category) - @Localizer["Rating"]: @displayRating</h6>
    <h6 style="color: gray;">@Localizer["PublishTime"]: @Html.DisplayFor(model => model.Article.PublishTime)</h6>
    <div id="articleObjectRating" class="ratings">
        <h6 style="color: gray;">@Localizer["RateSign"]:</h6>
    </div>
    @if (User.Identity.IsAuthenticated && editAllowed)
    {
        <p>
            <a asp-action="CreateArticle" asp-route-id="@Model.Article.Id" class="btn btn-sm btn-secondary">@Localizer["EditArticle"]</a>
        </p>
    }
    <hr />
    <div class="slider">
        @foreach (var imageUrl in Model.ImageUrls)
        {
            <div><img src="@imageUrl"></div>
        }
    </div>
    <div>
        @Html.Raw(contentHtml)
    </div>
    <div class="container flex-column d-flex justify-content-center align-items-center">
        <h6>@Localizer["AuthorsRatingBanner"]:</h6>
        <div class="d-flex justify-content-between align-items-center">
            <div id="rating" class="ratings">
            </div>
        </div>
    </div>
    <div>
        @Localizer["LikeButton"]:&nbsp;
        <i id="likeButton" onclick="like(this)" class="fa fa-thumbs-up @if (like) { @ratingStyle }"></i>
    </div>

    <a href='@(Url.Action("Search", "Feed") + "?mode=2&query=" + Model.Article.ArticleObject.Name)'>
        <h6 style="color: gray;">@Localizer["ShowSimilarArticles"]</h6>
    </a>

    <div class="container mb-5">
        <div class="d-flex justify-content-center row">
            <div class="d-flex flex-column">
                <div class="coment-bottom p-2 px-4" id="commentSection">
                    <div class="d-flex flex-row add-comment-section mt-4 mb-4">
                        <input type="text" id="commentInput" class="form-control mr-3" placeholder='@(User.Identity.IsAuthenticated ? Localizer["CommentPlaceholder"] : Localizer["CommentSignIn"])' @(User.Identity.IsAuthenticated ? "" : "disabled")>
                        <button class="btn btn-primary" onclick="sendComment()" type="button" @(User.Identity.IsAuthenticated ? "" : "disabled")>@Localizer["CommentButton"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function drawRating(rating) {
        var ratingField = document.getElementById("rating");
        for (var i = 1; i <= 10; ++i) {
            var icon = document.createElement("i");
            icon.setAttribute("class", "fa fa-star");
            if (i <= rating) {
                icon.classList.add('@ratingStyle');
            }
            ratingField.appendChild(icon);
        }
    }
    window.onload = drawRating(@Model.Article.Rating);
    
    var isAuth = '@User.Identity.IsAuthenticated' === 'True';
    var currentRating = 0;
    function markStarRating(star, send) {
        if (star.id <= 0 || !isAuth) {
            return;
        }
        var rating = parseInt(star.id);
        for (var i = 1; i <= 5; ++i) {
            var icon = document.getElementById(i.toString());
            if (i <= rating && rating != currentRating) {
                if (!icon.classList.contains('@ratingStyle')) {
                    icon.classList.add('@ratingStyle');
                }
            } else {
                if (icon.classList.contains('@ratingStyle')) {
                    icon.classList.remove('@ratingStyle');
                }
            }
        }
        currentRating = rating;
        if (send) {
            let params = new URLSearchParams();
            params.append('articleId', '@Model.Article.Id');
            params.append('rating', rating);

            fetch('@Url.Action("RateArticleObject", "Feed")', {
                method: 'POST',
                body: params
            });
        }
    }
    function createArticleObjectRating() {
        var ratingField = document.getElementById("articleObjectRating");
        for (var i = 1; i <= 5; ++i) {
            var icon = document.createElement("i");
            icon.setAttribute("class", "fa fa-star");
            icon.id = i;
            icon.onclick = function () { markStarRating(this, true); };
            ratingField.appendChild(icon);
        }
    }
    window.onload = createArticleObjectRating();
    markStarRating({id: @rating}, false);

    function like(button) {
        if (!isAuth) {
            return;
        }
        var liked = !button.classList.contains('@ratingStyle');
        if (liked) {
            button.classList.add('@ratingStyle');
        } else {
            button.classList.remove('@ratingStyle');
        }
        let params = new URLSearchParams();
        params.append('articleId', '@Model.Article.Id');
        params.append('like', liked);
        fetch('@Url.Action("Like", "Feed")', {
            method: "POST",
            body: params
        })
    }
</script>

<input type="hidden" name="authorId" id="commentAuthorId" value="" />
<script>
    function createAuthLink(authorNameElement, authorName, authorId) {
        var link = document.createElement("a");
        link.setAttribute("href", '@Url.Action("Index", "Account")' + "?userId=" + authorId);
        link.setAttribute("class", "navbar-brand");
        link.innerText = authorName;
        authorNameElement.appendChild(link);
    }
    function createDeleteLink(authorNameElement) {
        var deleteButton = document.createElement("a");
        deleteButton.setAttribute("class", "delete-comment-link");
        deleteButton.innerText = "(@Localizer["DeleteCommentButton"])";
        deleteButton.onclick = () => {
            deleteComment(authorNameElement);
        };
        var space = document.createTextNode(" ");
        authorNameElement.appendChild(space);
        authorNameElement.appendChild(deleteButton);
    }
    function createAuthorName(author, authorName, authorId, editable) {
        var authorNameElement = document.createElement("h5");
        createAuthLink(authorNameElement, authorName, authorId);
        document.getElementById("commentAuthorId").value = authorId;
        if (editable) {
            createDeleteLink(authorNameElement);
        }
        author.appendChild(authorNameElement);
    }
    function createAuthor(comment, authorName, authorId, editable) {
        var author = document.createElement("div");
        author.setAttribute("class", "d-flex flex-row align-items-center commented-user");
        createAuthorName(author, authorName, authorId, editable);
        comment.appendChild(author);
    }
    function createCommentContent(comment, commentText) {
        var commentContent = document.createElement("div");
        commentContent.setAttribute("class", "comment-text-sm");
        var commentSpan = document.createElement("span");
        commentSpan.innerText = commentText;
        commentContent.appendChild(commentSpan);
        comment.appendChild(commentContent);
    }
    function drawComment(authorName, authorId, commentText, commentId, editable) {
        var comment = document.createElement("div");
        comment.setAttribute("class", "commented-section mt-2");
        comment.setAttribute("id", commentId);
        createAuthor(comment, authorName, authorId, editable);
        createCommentContent(comment, commentText);
        var commentSection = document.getElementById("commentSection");
        commentSection.appendChild(comment);
    }
    function removeComment(commentId) {
        document.getElementById(commentId).remove();
    }
</script>

<script>
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/comment?articleId=" + '@Model.Article.Id')
        .build();

    connection.on("GetAllComments", function(comments) {
        comments.forEach(element => 
            drawComment(element.author, element.authorId, element.content, element.commentId, element.editable.toLowerCase() === "true"));
    });
    connection.on("GetNewComment", function(comment) {
        drawComment(comment.author, comment.authorId, comment.content, comment.commentId, comment.editable.toLowerCase() === "true");
    });
    connection.on("RemoveComment", function (commentId) {
        removeComment(commentId);
    });

    connection.start().then(function () {
    }).catch(function (err) {
        return console.error(err.toString());
    });
</script>

<script>
    function sendComment() {
        var commentInput = document.getElementById("commentInput");
        connection.invoke("MakeComment", commentInput.value)
            .then(res => commentInput.value = "")
            .catch(err => function () { console.error(err); });
    }
    function deleteComment(button) {
        var commentSection = button.parentNode.parentNode;
        connection.invoke("RemoveComment", commentSection.id)
            .catch(err => function () { console.error(err); });
    }
</script>
<script>
    $(document).ready(function () {
        $('.slider').slick({
            dots: true,
            speed: 150,
        });
    });

</script>